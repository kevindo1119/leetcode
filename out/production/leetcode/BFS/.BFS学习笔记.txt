//template
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
        List<List<Integer>> res = new ArrayList<>();
        
        if (root == null) {
            return res;
        }
        
        // 1. 创建一个队列，把起始节点都放进去
        Queue<TreeNode> queue = new LinkedList<>();
        queue.offer(root);
        
        // 2. while 队列不空，处理队列中的节点，并拓展出新的节点
        while (!queue.isEmpty()) {
            // for 上一层的节点拓展下一层的节点
            // queue.size() 写在for loop 里面的问题是， queue.size是改变的，不能完成层拓展，但是也没有问题。
            List<Integer> level = new ArrayList<>();
            int size = queue.size();
            for (int i = 0; i < size; ++i) {
                TreeNode node = queue.poll();
                level.add(node.val);
                if (node.left != null) {
                    queue.offer(node.left);
                }
                if (node.right  != null) {
                    queue.offer(node.right);
                }
            }
            res.add(level);
        }
        
        return res;
    }
}
1. 用stack(DFS 标配)代替queue(BFS 标配)行不行？
    也不是不行，就是相当于颠倒操作，走蛇字形状， 不是标准配置
2. 是否需要实现分层？
    需要分层的话多一层for， line29 只需要保留:
            while (!queue.isEmpty()) {
                TreeNode node = queue.poll();
                level.add(node.val);
                if (node.left != null) {
                    queue.offer(node.left);
                }
                if (node.right  != null) {
                    queue.offer(node.right);
                }
            }
3. size = queue.size()
    如果直接 for（int i=0; i < queue.size(); i ++） 会怎么样？
    queue.size() 写在for loop 里面的问题是， queue.size是改变的，不能完成层拓展，但是也没有问题。
    
Related Problems:
https://leetcode.com/problems/binary-tree-level-order-traversal/ 102. Binary Tree Level Order Traversal
https://leetcode.com/problems/binary-tree-zigzag-level-order-traversal/ 103. Binary Tree Zigzag Level Order Traversal
https://leetcode.com/problems/binary-tree-level-order-traversal-ii/ 107. Binary Tree Level Order Traversal II
https://leetcode.com/problems/clone-graph/ 133. Clone Graph
https://leetcode.com/problems/serialize-and-deserialize-binary-tree/ 297. Serialize and Deserialize Binary Tree

图上的宽度优先搜索 BFS in Graph
图中存在环， 存在意味着，同一个节点可能重复进入队列
开一个HashMap（有key value） / HashSet （只有key） 

最典型的BFS问题  -- 隐式图（Implicit Graph） 最短路径
Related Problems:
https://leetcode.com/problems/word-ladder/ 127. Word Ladder
https://leetcode.com/problems/number-of-islands/ 200. Number of Islands
https://leetcode.com/problems/minimum-knight-moves/ 1197. Minimum Knight Moves
